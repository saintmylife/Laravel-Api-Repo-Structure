<?php

namespace {{ namespace }};

use App\Modules\Base\Domain\BaseService;
use App\Modules\Common\Domain\Payload;
use App\Modules\{{ arg_name }}\Domain\{{ arg_name }}Filter;
use App\Modules\{{ arg_name }}\Repository\{{ arg_name }}RepositoryInterface;
use App\Modules\{{ arg_name }}\{{ arg_name }}Dto;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Hash;

/**
 * {{ arg_name }}Edit service
 */
class {{ arg_name }}Edit extends BaseService
{
    private $filter;
    private ${{ strtolower(arg_name) }}Repo;

    public function __construct({{ arg_name }}Filter $filter, {{ arg_name }}RepositoryInterface ${{ strtolower(arg_name) }}Repo)
    {
        $this->filter = $filter;
        $this->{{ strtolower(arg_name) }}Repo = ${{ strtolower(arg_name) }}Repo;
    }

    public function __invoke(int $id, array $data): Payload
    {
        ${{ strtolower(arg_name) }}Dto = $this->makeDto($data, new {{ arg_name }}Dto);
        ${{ strtolower(arg_name) }}Dto->id = $id;
        if (! $this->filter->forUpdate(${{ strtolower(arg_name) }}Dto)) {
            $messages = $this->filter->getMessages();
            return $this->newPayload(Payload::STATUS_NOT_VALID, compact('messages', 'data'));
        }

        try {
            $this->{{ strtolower(arg_name) }}Repo->find($id);
        } catch (ModelNotFoundException $e) {
            return $this->newPayload(Payload::STATUS_NOT_FOUND, compact('id'));
        }

        $dataForDb = ${{ strtolower(arg_name) }}Dto->getData();
        if (is_null(${{ strtolower(arg_name) }}Dto->password)) {
            unset($dataForDb['password']);
        } else {
            $dataForDb['password'] = Hash::make($dataForDb['password']);
        }

        $update = $this->{{ strtolower(arg_name) }}Repo->update($dataForDb, $id);
        if (!is_null($update)) {
            $update->syncRoles(${{ strtolower(arg_name) }}Dto->roles);
        }

        return $this->newPayload(Payload::STATUS_UPDATED, compact('data'));
    }
}

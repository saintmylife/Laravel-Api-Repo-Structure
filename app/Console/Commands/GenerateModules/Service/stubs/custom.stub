<?php

namespace {$customServiceNamespace};

use App\Modules\{$version}\{$pathNamespaceStudly}\{$pathNamespaceStudly}Dto;
use App\Modules\{$version}\{$pathNamespaceStudly}\Domain\{$pathNamespaceStudly}Filter;
use App\Modules\{$version}\{$pathNamespaceStudly}\Repository\{$pathNamespaceStudly}Repository;
use App\Modules\Base\Domain\BaseService;
use App\Modules\Common\Domain\Payload;

class {$service} extends BaseService
{
    public function __construct(private {$pathNamespaceStudly}Filter $filter, private {$pathNamespaceStudly}Repository $repo)
    {
    }

    public function __invoke(array $data): Payload
    {
        if (!$this->filter->forInsert($data)) {
            $messages = $this->filter->getValidationMessage();
            return $this->newPayload(Payload::STATUS_NOT_VALID, compact('data', 'messages'));
        }
        ${$pathNamespaceCamel}Dto = new {$pathNamespaceStudly}Dto($this->filter->getValidatedData());

        $create = $this->repo->create(${$pathNamespaceCamel}Dto->getData());

        return $this->newPayload(Payload::STATUS_CREATED, compact('create'));
    }
}

<?php

namespace {$editServiceNamespace};

use App\Modules\{$version}\{$service}\{$service}Dto;
use App\Modules\{$version}\{$service}\Domain\{$service}Filter;
use App\Modules\{$version}\{$service}\Repository\{$service}Repository;
use App\Modules\Base\Domain\BaseService;
use App\Modules\Common\Domain\Payload;

class {$service}Edit extends BaseService
{
    public function __construct(private {$service}Fetch $fetch,private {$service}Filter $filter, private {$service}Repository $repo)
    {
    }

    public function __invoke(int $id, array $data): Payload
    {
        if((${$serviceCamel} = $this->fetch->__invoke($id))->getStatus() != 'FOUND'){
            return ${$serviceCamel};
        }
        ${$serviceCamel} = ${$serviceCamel}->getResult()['data'];

        if (!$this->filter->forUpdate($data,$id)) {
            $messages = $this->filter->getValidationMessage();
            return $this->newPayload(Payload::STATUS_NOT_VALID, compact('messages', 'data'));
        }
        ${$serviceCamel}Dto = new {$service}Dto($this->filter->getValidatedData());
        ${$serviceCamel}Dto->id = $id;

        $update = $this->repo->update(${$serviceCamel}Dto->getData(), $id);
        return $this->newPayload(Payload::STATUS_UPDATED, compact('update'));
    }
}
